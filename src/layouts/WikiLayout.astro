---
import { getCollection } from 'astro:content';

// Get all wiki entries
const allWikiEntries = await getCollection('wiki');

// Group entries by category
const categorizedEntries = allWikiEntries.reduce((acc, entry) => {
  const category = entry.data.category || 'Featured';
  if (!acc[category]) {
    acc[category] = [];
  }
  acc[category].push(entry);
  return acc;
}, {} as Record<string, typeof allWikiEntries>);

// Sort categories alphabetically, but put "Featured" at the top
const sortedCategories = Object.keys(categorizedEntries).sort((a, b) => {
  if (a === 'Featured') return -1;
  if (b === 'Featured') return 1;
  return a.localeCompare(b);
});

// Sort entries within each category by order property if available, then by title
for (const category in categorizedEntries) {
  categorizedEntries[category].sort((a, b) => {
    // If both have order, sort by order
    if (a.data.order !== undefined && b.data.order !== undefined) {
      return a.data.order - b.data.order;
    }
    // If only a has order, a comes first
    if (a.data.order !== undefined) return -1;
    // If only b has order, b comes first
    if (b.data.order !== undefined) return 1;
    // Otherwise sort by title
    return a.data.title.localeCompare(b.data.title);
  });
}

// Get the current page slug from the URL
const currentPath = Astro.url.pathname;
const currentSlug = currentPath.split('/').pop() || '';
---

<!doctype html>
<html lang="en" class="dark">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>Hexed Wiki</title>
	</head>
	<body>
		<div class="wiki-container">
			<aside class="sidebar">
				<div class="sidebar-header">
					<h2>Navigation</h2>
					<div class="sidebar-controls">
						<button id="theme-toggle" aria-label="Toggle theme">
							<svg id="sun-icon" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="hidden">
								<circle cx="12" cy="12" r="5"></circle>
								<line x1="12" y1="1" x2="12" y2="3"></line>
								<line x1="12" y1="21" x2="12" y2="23"></line>
								<line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
								<line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
								<line x1="1" y1="12" x2="3" y2="12"></line>
								<line x1="21" y1="12" x2="23" y2="12"></line>
								<line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
								<line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
							</svg>
							<svg id="moon-icon" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
								<path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
							</svg>
						</button>
						<button id="mobile-toggle" aria-label="Toggle menu">
							<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
								<line x1="3" y1="12" x2="21" y2="12"></line>
								<line x1="3" y1="6" x2="21" y2="6"></line>
								<line x1="3" y1="18" x2="21" y2="18"></line>
							</svg>
						</button>
					</div>
				</div>
				<nav id="sidebar-nav">
					<ul>
						<li>
							<a 
								href="/" 
								class={currentPath === '/' || currentPath === '' ? 'active' : ''}
							>
								<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                  <polyline points="9 22 9 12 15 12 15 22"></polyline>
                </svg>
								Home
							</a>
						</li>
						
						{sortedCategories.map((category) => {
							// Check if this category is the current page's category
							const isCategoryActive = categorizedEntries[category].some(entry => 
								currentPath.includes(`/wiki/${entry.slug}`)
							);
							
							return (
								<li class="category">
									<div 
										class={`category-header ${isCategoryActive ? 'active' : ''}`}
										data-category={category}
									>
										<svg class="folder-icon" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
											<path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"></path>
										</svg>
										<span>{category}</span>
										<svg class="chevron-icon" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
											<polyline points="6 9 12 15 18 9"></polyline>
										</svg>
									</div>
									<ul class={`category-items ${isCategoryActive ? 'expanded' : ''}`}>
										{categorizedEntries[category].map((entry) => {
											const isActive = currentPath.includes(`/wiki/${entry.slug}`);
											return (
												<li>
													<a 
														href={`/wiki/${entry.slug}`} 
														class={isActive ? 'active' : ''}
													>
														{entry.data.title}
													</a>
												</li>
											);
										})}
									</ul>
								</li>
							);
						})}
					</ul>
				</nav>
			</aside>
			<main class="content">
				<slot />
			</main>
		</div>

		<script>
			// Theme toggle functionality
			const themeToggle = document.getElementById('theme-toggle');
			const sunIcon = document.getElementById('sun-icon');
			const moonIcon = document.getElementById('moon-icon');
			const html = document.documentElement;
			
			// Check for saved theme preference or use default (dark)
			const savedTheme = localStorage.getItem('theme') || 'dark';
			html.classList.toggle('dark', savedTheme === 'dark');
			
			// Update icon visibility based on current theme
			updateThemeIcon(savedTheme);
			
			// Toggle theme when button is clicked
			themeToggle?.addEventListener('click', () => {
				const isDark = html.classList.toggle('dark');
				const newTheme = isDark ? 'dark' : 'light';
				localStorage.setItem('theme', newTheme);
				updateThemeIcon(newTheme);
			});
			
			function updateThemeIcon(theme) {
				if (sunIcon && moonIcon) {
					if (theme === 'dark') {
						sunIcon.classList.add('hidden');
						moonIcon.classList.remove('hidden');
					} else {
						sunIcon.classList.remove('hidden');
						moonIcon.classList.add('hidden');
					}
				}
			}
			
			// Toggle mobile menu
			document.getElementById('mobile-toggle')?.addEventListener('click', () => {
				const nav = document.getElementById('sidebar-nav');
				if (nav) {
					nav.classList.toggle('show');
				}
			});
			
			// Category folder toggle functionality
			document.querySelectorAll('.category-header').forEach(header => {
				header.addEventListener('click', () => {
					const categoryItems = header.nextElementSibling;
					categoryItems.classList.toggle('expanded');
					header.classList.toggle('active');
				});
			});
		</script>
	</body>
</html>

<style>
	html, body {
		margin: 0;
		padding: 0;
		font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
		transition: background-color 0.3s ease, color 0.3s ease;
	}
	
	/* Light mode (default) */
	html {
		background-color: #f8f9fa;
		color: #333;
	}
	
	/* Dark mode */
	html.dark {
		background-color: #121212;
		color: #e0e0e0;
	}
	
	html.dark .sidebar {
		background-color: #1e1e1e;
		border-right: 1px solid #333;
	}
	
	html.dark .sidebar h2 {
		border-bottom: 1px solid #333;
	}
	
	html.dark .sidebar a {
		color: #7ab3ff;
	}
	
	html.dark .sidebar a:hover {
		background-color: #2a2a2a;
	}
	
	html.dark .sidebar a.active {
		background-color: rgba(122, 179, 255, 0.2);
		color: #7ab3ff;
	}
	
	html.dark .content {
		background-color: #121212;
	}

	.wiki-container {
		display: flex;
		min-height: 100vh;
	}

	.sidebar {
		width: 280px;
		background-color: #f0f0f0;
		padding: 20px;
		border-right: 1px solid #ddd;
		position: sticky;
		top: 0;
		height: 100vh;
		overflow-y: auto;
		transition: background-color 0.3s ease, border-color 0.3s ease;
	}

	.sidebar-header {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 20px;
	}
	
	.sidebar-controls {
		display: flex;
		gap: 10px;
	}

	.sidebar h2 {
		margin-top: 0;
		padding-bottom: 10px;
		border-bottom: 1px solid #ddd;
		transition: border-color 0.3s ease;
		font-size: 1.5rem;
	}

	.sidebar ul {
		list-style-type: none;
		padding: 0;
		margin: 0;
	}

	.sidebar > nav > ul > li {
		margin-bottom: 8px;
	}

	.sidebar a {
		text-decoration: none;
		color: #1a73e8;
		display: flex;
		align-items: center;
		gap: 10px;
		padding: 10px 12px;
		border-radius: 8px;
		transition: background-color 0.2s, color 0.3s ease;
		font-weight: 500;
	}

	.sidebar a:hover {
		background-color: #e8f0fe;
	}

	.sidebar a.active {
		background-color: rgba(26, 115, 232, 0.1);
		color: #1a73e8;
		font-weight: 600;
	}
	
	/* Category styling */
	.category {
		margin-bottom: 8px;
	}
	
	.category-header {
		display: flex;
		align-items: center;
		padding: 10px 12px;
		cursor: pointer;
		border-radius: 8px;
		transition: background-color 0.2s;
		user-select: none;
		font-weight: 500;
	}
	
	.category-header:hover {
		background-color: #e8f0fe;
	}
	
	html.dark .category-header:hover {
		background-color: #2a2a2a;
	}
	
	.category-header.active {
		background-color: rgba(26, 115, 232, 0.1);
		font-weight: 600;
	}
	
	html.dark .category-header.active {
		background-color: rgba(122, 179, 255, 0.1);
	}
	
	.folder-icon {
		margin-right: 10px;
		color: #1a73e8;
	}
	
	html.dark .folder-icon {
		color: #7ab3ff;
	}
	
	.chevron-icon {
		margin-left: auto;
		transition: transform 0.3s ease;
	}
	
	.category-header.active .chevron-icon {
		transform: rotate(180deg);
	}
	
	.category-items {
		max-height: 0;
		overflow: hidden;
		transition: max-height 0.3s ease;
		padding-left: 20px;
	}
	
	.category-items.expanded {
		max-height: 1000px; /* Arbitrary large value */
	}
	
	.category-items li {
		margin-bottom: 5px;
	}

	.content {
		flex: 1;
		padding: 30px;
		max-width: 1200px;
		margin: 0 auto;
		transition: background-color 0.3s ease;
	}

	#mobile-toggle, #theme-toggle {
		background: none;
		border: none;
		cursor: pointer;
		color: inherit;
		padding: 8px;
		border-radius: 8px;
		transition: background-color 0.2s;
	}
	
	#mobile-toggle:hover, #theme-toggle:hover {
		background-color: rgba(128, 128, 128, 0.2);
	}

	#mobile-toggle {
		display: none;
	}
	
	.hidden {
		display: none;
	}

	@media (max-width: 768px) {
		.wiki-container {
			flex-direction: column;
		}

		.sidebar {
			width: 100%;
			height: auto;
			position: relative;
			border-right: none;
			border-bottom: 1px solid #ddd;
			padding: 15px 20px;
		}

		#mobile-toggle {
			display: block;
		}

		#sidebar-nav {
			display: none;
		}

		#sidebar-nav.show {
			display: block;
		}

		.content {
			padding: 20px;
		}
	}
</style>