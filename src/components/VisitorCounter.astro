---
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;

let visitorCount = 0;
let error = null;

if (supabaseUrl && supabaseAnonKey) {
  const supabase = createClient(supabaseUrl, supabaseAnonKey);
  
  try {
    // Get today's date in YYYY-MM-DD format
    const today = new Date().toISOString().split('T')[0];
    
    // Get client IP or generate a unique ID if IP is not available
    const visitorId = crypto.randomUUID();
    
    // Check if this visitor has already been counted today
    const { data: existingVisit } = await supabase
      .from('visitors')
      .select('id')
      .eq('visitor_id', visitorId)
      .eq('visit_date', today)
      .maybeSingle();
    
    if (!existingVisit) {
      // Only insert if this visitor hasn't been counted today
      await supabase
        .from('visitors')
        .insert([
          { visitor_id: visitorId, visit_date: today }
        ]);
    }
    
    // Get total unique visitors count
    const { data: uniqueVisitors, error: countError } = await supabase
      .from('visitors')
      .select('visitor_id', { count: 'exact', head: true })
      .order('visitor_id');
    
    if (countError) {
      error = countError.message;
    } else if (uniqueVisitors !== null) {
      visitorCount = uniqueVisitors;
    }
  } catch (e) {
    error = e.message;
  }
}
---

<div class="visitor-counter">
  <div class="counter-icon">
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path>
      <circle cx="9" cy="7" r="4"></circle>
      <path d="M23 21v-2a4 4 0 0 0-3-3.87"></path>
      <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
    </svg>
  </div>
  <div class="counter-content">
    <p class="counter-label">Total Visitors</p>
    {error ? (
      <p class="counter-error">Error loading count</p>
    ) : (
      <p class="counter-value" id="visitor-count">{visitorCount}</p>
    )}
  </div>
</div>

<script>
  let lastVisitorId = '';

  const updateCount = async () => {
    try {
      const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
      const supabaseAnonKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;
      
      if (!supabaseUrl || !supabaseAnonKey) return;
      
      const { createClient } = await import('@supabase/supabase-js');
      const supabase = createClient(supabaseUrl, supabaseAnonKey);
      
      // Generate consistent visitor ID for this session
      if (!lastVisitorId) {
        lastVisitorId = crypto.randomUUID();
      }
      
      const today = new Date().toISOString().split('T')[0];
      
      // Check if already visited today
      const { data: existingVisit } = await supabase
        .from('visitors')
        .select('id')
        .eq('visitor_id', lastVisitorId)
        .eq('visit_date', today)
        .maybeSingle();
      
      if (!existingVisit) {
        // Only insert if not visited today
        await supabase
          .from('visitors')
          .insert([
            { visitor_id: lastVisitorId, visit_date: today }
          ]);
      }
      
      // Get updated count of unique visitors
      const { data: uniqueVisitors } = await supabase
        .from('visitors')
        .select('visitor_id', { count: 'exact', head: true })
        .order('visitor_id');
      
      if (uniqueVisitors !== null) {
        const counterElement = document.getElementById('visitor-count');
        if (counterElement) {
          counterElement.textContent = uniqueVisitors.toString();
        }
      }
    } catch (e) {
      console.error('Error updating visitor count:', e);
    }
  };

  // Update count on page load and every minute
  updateCount();
  setInterval(updateCount, 60000);
</script>

<style>
  .visitor-counter {
    display: flex;
    align-items: center;
    background-color: #f8f9fa;
    border-radius: 8px;
    padding: 12px 16px;
    margin: 20px auto;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    transition: background-color 0.3s ease;
    max-width: 300px;
  }
  
  .counter-icon {
    color: #1a73e8;
    margin-right: 12px;
    transition: color 0.3s ease;
  }
  
  .counter-content {
    display: flex;
    flex-direction: column;
  }
  
  .counter-label {
    font-size: 0.9rem;
    color: #555;
    margin: 0;
    transition: color 0.3s ease;
  }
  
  .counter-value {
    font-size: 1.2rem;
    font-weight: 600;
    color: #1a73e8;
    margin: 0;
    transition: color 0.3s ease;
  }

  .counter-error {
    font-size: 1rem;
    color: #dc3545;
    margin: 0;
  }
  
  /* Dark mode styles */
  :global(html.dark) .visitor-counter {
    background-color: #252525;
  }
  
  :global(html.dark) .counter-icon {
    color: #7ab3ff;
  }
  
  :global(html.dark) .counter-label {
    color: #aaa;
  }
  
  :global(html.dark) .counter-value {
    color: #7ab3ff;
  }
</style>